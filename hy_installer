#!/bin/bash

# Проверка прав суперпользователя
if [[ $EUID -ne 0 ]]; then
   echo -e "\e[1;31mЭтот скрипт должен быть запущен с правами суперпользователя (root).\e[0m" 
   exit 1
fi

# ASCII-арт
echo -e "\e[1;34m
                                                                                    
_|    _|            _|_|_|                        _|                        _|      
_|    _|  _|    _|  _|    _|  _|  _|_|    _|_|          _|_|      _|_|_|  _|_|_|_|  
_|_|_|_|  _|    _|  _|_|_|    _|_|      _|    _|  _|  _|_|_|_|  _|          _|      
_|    _|  _|    _|  _|        _|        _|    _|  _|  _|        _|          _|      
_|    _|    _|_|_|  _|        _|          _|_|    _|    _|_|_|    _|_|_|      _|_|  
                _|                                _|                               
\e[0m"

# Обновление системы
echo -e "\e[1;32mОбновление системы...\e[0m"
apt-get update && apt-get upgrade -y

# Установка необходимых зависимостей
echo -e "\e[1;32mУстановка необходимых зависимостей...\e[0m"
apt-get install -y git curl unzip wget

# Установка PHP и необходимых расширений
echo -e "\e[1;32mУстановка PHP и необходимых расширений...\e[0m"
apt-get install -y php php-cli php-gd php-mysql php-pdo php-mbstring php-tokenizer php-bcmath php-xml php-fpm php-curl php-zip

# Установка Composer
echo -e "\e[1;32mУстановка Composer...\e[0m"
curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Установка Nginx
echo -e "\e[1;32mУстановка Nginx...\e[0m"
apt-get install -y nginx

# Установка MySQL
echo -e "\e[1;32mУстановка MySQL...\e[0m"
apt-get install -y mysql-server

# Настройка MySQL
echo -e "\e[1;32mНастройка MySQL...\e[0m"
mysql_secure_installation

# Создание базы данных и пользователя для Plexactyl
echo -e "\e[1;32mСоздание базы данных и пользователя для Plexactyl...\e[0m"
read -p "Введите имя базы данных: " DB_NAME
read -p "Введите имя пользователя базы данных: " DB_USER
read -sp "Введите пароль пользователя базы данных(после этого может потребовать еще 4 раза пароль): " DB_PASS
echo

mysql -u root -p -e "CREATE DATABASE ${DB_NAME};"
mysql -u root -p -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASS}';"
mysql -u root -p -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
mysql -u root -p -e "FLUSH PRIVILEGES;"

# Клонирование репозитория Plexactyl
echo -e "\e[1;32mКлонирование репозитория Plexactyl...\e[0m"
git clone https://github.com/NinoviumLabs/plexactyl.git /var/www/plexactyl

# Переход в директорию Plexactyl
cd /var/www/plexactyl

# Установка зависимостей через Composer
echo -e "\e[1;32mУстановка зависимостей через Composer...\e[0m"
composer install --no-dev --optimize-autoloader

# Настройка .env файла
echo -e "\e[1;32mНастройка .env файла...\e[0m"
cp .env.example .env
php artisan key:generate

# Настройка базы данных в .env файле
sed -i "s/DB_DATABASE=homestead/DB_DATABASE=${DB_NAME}/" .env
sed -i "s/DB_USERNAME=homestead/DB_USERNAME=${DB_USER}/" .env
sed -i "s/DB_PASSWORD=secret/DB_PASSWORD=${DB_PASS}/" .env

# Запуск миграций и сидов
echo -e "\e[1;32mЗапуск миграций и сидов...\e[0m"
php artisan migrate --seed --force

# Настройка Nginx
echo -e "\e[1;32mНастройка Nginx...\e[0m"
read -p "Введите ваш домен или IP-адрес: " SERVER_NAME

cat <<EOF > /etc/nginx/sites-available/plexactyl
server {
    listen 80;
    server_name ${SERVER_NAME};
    root /var/www/plexactyl/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
EOF

# Активация конфигурации Nginx
ln -s /etc/nginx/sites-available/plexactyl /etc/nginx/sites-enabled/
nginx -t
systemctl restart nginx

# Установка Node.js и npm
echo -e "\e[1;32mУстановка Node.js и npm...\e[0m"
curl -sL https://deb.nodesource.com/setup_14.x | bash -
apt-get install -y nodejs

# Установка зависимостей Node.js
echo -e "\e[1;32mУстановка зависимостей Node.js...\e[0m"
npm install --prefix /var/www/plexactyl
npm run --prefix /var/www/plexactyl build

# Настройка прав доступа
echo -e "\e[1;32mНастройка прав доступа...\e[0m"
chown -R www-data:www-data /var/www/plexactyl/storage
chown -R www-data:www-data /var/www/plexactyl/bootstrap/cache

# Выбор создания сертификата Let's Encrypt
read -p "Хотите создать сертификат Let's Encrypt? (y/n): " LETSENCRYPT
if [[ $LETSENCRYPT == "y" || $LETSENCRYPT == "Y" ]]; then
    # Установка Certbot
    echo -e "\e[1;32mУстановка Certbot...\e[0m"
    apt-get install -y certbot python3-certbot-nginx

    # Создание сертификата Let's Encrypt
    echo -e "\e[1;32mСоздание сертификата Let's Encrypt...\e[0m"
    certbot --nginx -d ${SERVER_NAME}

    # Перезапуск Nginx
    systemctl restart nginx
fi

echo -e "\e[1;32mУстановка Plexactyl завершена!\e[0m"
