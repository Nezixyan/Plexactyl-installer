#!/bin/bash

# Проверка прав суперпользователя
if [[ $EUID -ne 0 ]]; then
   echo -e "\e[1;31mЭтот скрипт должен быть запущен с правами суперпользователя (root).\e[0m" 
   exit 1
fi

# ASCII-арт
echo -e "\e[1;34m
                                                                                    
_|    _|            _|_|_|                        _|                        _|      
_|    _|  _|    _|  _|    _|  _|  _|_|    _|_|          _|_|      _|_|_|  _|_|_|_|  
_|_|_|_|  _|    _|  _|_|_|    _|_|      _|    _|  _|  _|_|_|_|  _|          _|      
_|    _|  _|    _|  _|        _|        _|    _|  _|  _|        _|          _|      
_|    _|    _|_|_|  _|        _|          _|_|    _|    _|_|_|    _|_|_|      _|_|  
                _|                                _|                               
\e[0m"

# Выбор установщика
echo -e "\e[1;32mВыберите установщик:\e[0m"
echo -e "1. Plexactyl"
echo -e "2. Pterodactyl (в разработке)"
read -p "Введите номер установщика: " INSTALLER_CHOICE

if [[ $INSTALLER_CHOICE == "1" ]]; then
    # Обновление системы
    echo -e "\e[1;32mОбновление системы...\e[0m"
    apt-get update && apt-get upgrade -y &
    show_loader $! "Обновление системы"

    # Установка необходимых зависимостей
    echo -e "\e[1;32mУстановка необходимых зависимостей...\e[0m"
    apt-get install -y git curl unzip wget &
    show_loader $! "Установка необходимых зависимостей"

    # Установка PHP и необходимых расширений
    echo -e "\e[1;32mУстановка PHP и необходимых расширений...\e[0m"
    apt-get install -y php php-cli php-gd php-mysql php-pdo php-mbstring php-tokenizer php-bcmath php-xml php-fpm php-curl php-zip &
    show_loader $! "Установка PHP и необходимых расширений"

    # Установка Composer
    echo -e "\e[1;32mУстановка Composer...\e[0m"
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &
    show_loader $! "Установка Composer"

    # Установка Nginx
    echo -e "\e[1;32mУстановка Nginx...\e[0m"
    apt-get install -y nginx &
    show_loader $! "Установка Nginx"

    # Установка MySQL
    echo -e "\e[1;32mУстановка MySQL...\e[0m"
    apt-get install -y mysql-server &
    show_loader $! "Установка MySQL"

    # Настройка MySQL
    echo -e "\e[1;32mНастройка MySQL...\e[0m"
    mysql_secure_installation &
    show_loader $! "Настройка MySQL"

    # Создание базы данных и пользователя для Plexactyl
    echo -e "\e[1;32mСоздание базы данных и пользователя для Plexactyl...\e[0m"
    read -p "Введите имя базы данных: " DB_NAME
    read -p "Введите имя пользователя базы данных: " DB_USER
    read -sp "Введите пароль пользователя базы данных: " DB_PASS
    echo

    mysql -u root -p -e "CREATE DATABASE ${DB_NAME};"
    mysql -u root -p -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASS}';"
    mysql -u root -p -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
    mysql -u root -p -e "FLUSH PRIVILEGES;"

    # Клонирование репозитория Plexactyl
    echo -e "\e[1;32mКлонирование репозитория Plexactyl...\e[0m"
    git clone https://github.com/NinoviumLabs/plexactyl.git /var/www/plexactyl &
    show_loader $! "Клонирование репозитория Plexactyl"

    # Переход в директорию Plexactyl
    cd /var/www/plexactyl

    # Установка зависимостей через Composer
    echo -e "\e[1;32mУстановка зависимостей через Composer...\e[0m"
    composer install --no-dev --optimize-autoloader &
    show_loader $! "Установка зависимостей через Composer"

    # Настройка .env файла
    echo -e "\e[1;32mНастройка .env файла...\e[0m"
    cp .env.example .env
    php artisan key:generate

    # Настройка базы данных в .env файле
    sed -i "s/DB_DATABASE=homestead/DB_DATABASE=${DB_NAME}/" .env
    sed -i "s/DB_USERNAME=homestead/DB_USERNAME=${DB_USER}/" .env
    sed -i "s/DB_PASSWORD=secret/DB_PASSWORD=${DB_PASS}/" .env

    # Запуск миграций и сидов
    echo -e "\e[1;32mЗапуск миграций и сидов...\e[0m"
    php artisan migrate --seed --force &
    show_loader $! "Запуск миграций и сидов"

    # Настройка Nginx
    echo -e "\e[1;32mНастройка Nginx...\e[0m"
    read -p "Введите ваш домен или IP-адрес: " SERVER_NAME

    cat <<EOF > /etc/nginx/sites-available/plexactyl
server {
    listen 80;
    server_name ${SERVER_NAME};
    root /var/www/plexactyl/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
EOF

    # Активация конфигурации Nginx
    ln -s /etc/nginx/sites-available/plexactyl /etc/nginx/sites-enabled/
    nginx -t
    systemctl restart nginx

    # Установка Node.js и npm
    echo -e "\e[1;32mУстановка Node.js и npm...\e[0m"
    curl -sL https://deb.nodesource.com/setup_14.x | bash -
    apt-get install -y nodejs &
    show_loader $! "Установка Node.js и npm"

    # Установка зависимостей Node.js
    echo -e "\e[1;32mУстановка зависимостей Node.js...\e[0m"
    npm install --prefix /var/www/plexactyl &
    show_loader $! "Установка зависимостей Node.js"
    npm run --prefix /var/www/plexactyl build &
    show_loader $! "Сборка зависимостей Node.js"

    # Настройка прав доступа
    echo -e "\e[1;32mНастройка прав доступа...\e[0m"
    chown -R www-data:www-data /var/www/plexactyl/storage
    chown -R www-data:www-data /var/www/plexactyl/bootstrap/cache

    # Выбор создания сертификата Let's Encrypt
    read -p "Хотите создать сертификат Let's Encrypt? (y/n): " LETSENCRYPT
    if [[ $LETSENCRYPT == "y" || $LETSENCRYPT == "Y" ]]; then
        # Установка Certbot
        echo -e "\e[1;32mУстановка Certbot...\e[0m"
        apt-get install -y certbot python3-certbot-nginx &
        show_loader $! "Установка Certbot"

        # Создание сертификата Let's Encrypt
        echo -e "\e[1;32mСоздание сертификата Let's Encrypt...\e[0m"
        certbot --nginx -d ${SERVER_NAME} &
        show_loader $! "Создание сертификата Let's Encrypt"

        # Перезапуск Nginx
        systemctl restart nginx
    fi

    echo -e "\e[1;32mУстановка Plexactyl завершена!\e[0m"

elif [[ $INSTALLER_CHOICE == "2" ]]; then
    echo -e "\e[1;31mФункция установки Pterodactyl в разработке. Пожалуйста, выберите Plexactyl.\e[0m"
else
    echo -e "\e[1;31mНеверный выбор. Пожалуйста, выберите 1 или 2.\e[0m"
fi

# Функция для отображения лоадера
show_loader() {
    local pid=$1
    local message=$2
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf "\e[1;33m[%c] %s...\e[0m\r" "$spinstr" "$message"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
    done
    printf "\e[1;32m[✓] %s завершено.\e[0m\n" "$message"
}
